package com.franolla;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/**
 *
 * @author Riley Franolla
 */
public class CustomerDetailsApplication extends javax.swing.JFrame {
    
    // The switch file currently selected
    private String switchFile;
    // The current customer created file
    private String customerFile;
    
    // Save the path of the files to use when reopen/resaving
    private String switchFilePath;
    private String saveFilePath;
    private String excelFilePath;
    private final Set customers = new TreeSet<>();

    /** Creates new form NewJFrame */
    public CustomerDetailsApplication() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Customer Details");
        try {
            Image i = ImageIO.read(getClass().getResource("logo.png"));
            setIconImage(i);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error setting the icon");
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectFile = new javax.swing.JButton();
        filePath = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerList = new javax.swing.JList<>();
        getText = new javax.swing.JButton();
        editCSV = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        jCurrentSwitchLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);
        setResizable(false);

        selectFile.setText("Select File");
        selectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileActionPerformed(evt);
            }
        });

        filePath.setEditable(false);
        filePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(customerList);

        getText.setText("Save Sumarry");
        getText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTextActionPerformed(evt);
            }
        });

        editCSV.setText("Add to Excel Table");
        editCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCSVActionPerformed(evt);
            }
        });

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/franolla/0.png"))); // NOI18N

        jCurrentSwitchLabel.setText("Current Selected File:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editCSV)
                            .addComponent(getText)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCurrentSwitchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(selectFile)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(logo)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCurrentSwitchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(getText, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(logo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void filePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathActionPerformed

    private void selectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileActionPerformed
        customers.clear();
        customerFile = null;
        final JFileChooser chooser = new JFileChooser();
        if (!Objects.isNull(switchFilePath)){
            chooser.setCurrentDirectory(new File(switchFilePath));
        }
        chooser.setDialogTitle("Select Switch File");
        chooser.setFileFilter(new FileNameExtensionFilter(".txt", "txt"));
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            switchFile = f.getAbsolutePath();
            switchFilePath = chooser.getCurrentDirectory().getAbsolutePath();
            //System.out.println(switchFilePath);
            filePath.setText(chooser.getSelectedFile().getName());
            // Get file and populate customer list
            getCustomers();
        } else if (result == JFileChooser.CANCEL_OPTION) {
            //System.out.println("Cancel was selected");
        }
    }//GEN-LAST:event_selectFileActionPerformed

    private void getTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTextActionPerformed
        // Open switch config file
        if (Objects.isNull(switchFile)){
            JOptionPane.showMessageDialog(this, "No Switch File Selected");
            return;
        }
        final File f = new File(switchFile);
	// A BufferedReader is an object that lets you read a stream of Text Data
	BufferedReader in = null;
	// Try to open the file
	// Handle exceptions if they happen
	try {
            in = new BufferedReader(new FileReader(f));
	}
	catch (final FileNotFoundException e){
            JOptionPane.showMessageDialog(this, "Switch File could not be opened");
            return;
	}
        final String customer = customerList.getSelectedValue();
        
        if (Objects.isNull(customer)){
            JOptionPane.showMessageDialog(this, "Please select a customer");
            return;
        }
        
        // Create file
        try {
            final JFileChooser chooser = new JFileChooser("Save");
            if (!Objects.isNull(switchFilePath)){
                chooser.setCurrentDirectory(new File(switchFilePath));
            }
            chooser.setDialogTitle("Select Folder");
            //Update UI
            UIManager.put("FileChooser.lookInLabelText", "Save In");
            SwingUtilities.updateComponentTreeUI(chooser);
            chooser.setFileFilter(new FileNameExtensionFilter(".txt", "txt"));
            chooser.setSelectedFile(new File(customer.equals("TEST") ? (customer + "1") : customer));
            chooser.setAcceptAllFileFilterUsed(false);
            int result = chooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                customerFile = chooser.getSelectedFile().getAbsolutePath();
                if(!customerFile.endsWith(".txt")) {
                    customerFile += ".txt";
                }
                saveFilePath = chooser.getCurrentDirectory().getAbsolutePath();
            } else if (result == JFileChooser.CANCEL_OPTION) {
                //System.out.println("Cancel was selected");
                return;
            }
            final File myObj = new File(customerFile);
            if (myObj.exists()){
                int answer = JOptionPane.showConfirmDialog(this, "The file exists, overwrite?",
                        "Existing file", JOptionPane.YES_NO_CANCEL_OPTION);
                if (answer != JOptionPane.YES_OPTION) {
                    return;
                }
            } else {
                myObj.createNewFile();
            }
        } catch (IOException e) {
            //System.out.println("An error occurred while creating file.");
            JOptionPane.showMessageDialog(this, "An error occurred while creating to file");
            //e.printStackTrace();
        }
        
        // Open file for writing
        try {
            final FileWriter myWriter = new FileWriter(customerFile);	
            String line = null;
            boolean done = false;
            do {
                try { // Try to Read the next line from the file
                    line = in.readLine();
                }
                catch (IOException e) { //Handle any errors
                    //System.out.println("There is a problem at one of the lines. Error Number - " +e);
                    JOptionPane.showMessageDialog(this, "There is a problem at one of the lines. " + e.getMessage());
                }
            
                // End of File
                if (line == null || line.length() == 0)
                {
                    done = true;  // No more data in the file - Your're done!  
                }	  
                else 
                {
                    // Get information
                    if (line.contains(customer)){
                        // Can be changed as needed depending on structure of the information file
                        if (line.startsWith("something" )){
                            myWriter.write(line + "\n");
                            line = in.readLine();
                            while(!line.startsWith("something")){
                                myWriter.write(line + "\n");
                                line = in.readLine();
                            }
                        }
                        // Can be changed as needed depending on structure of the information file
                        else if (line.startsWith("something else")){
                            String temp = line+ in.readLine();
                            temp = temp.replaceAll("section to eleminate", "");
                            temp = temp.replaceAll("regex", "");
                            myWriter.write(temp + "\n");
                        }
                        else{
                            myWriter.write(line + "\n");
                        }  
                    }
                    
                    else if (line.startsWith("something more")){
                        final String tempLine = line;
                        line = in.readLine();
                        if (line.contains(customer)){
                            myWriter.write(tempLine + "\n");
                            myWriter.write(line + "\n");
                            line = in.readLine();
                            while(line.startsWith(" ")){
                                myWriter.write(line + "\n");
                                line = in.readLine();
                            }
                        }
                    }
                    // TODO: FIX, It skips every other case
                    /*
                    else if (line.startsWith("  something less")){
                        final ArrayList<String> list = new ArrayList<String>();
                        String temp = line;
                        list.add(line);
                        boolean test = false;
                        //Need to fix
                        line = in.readLine();
                        while(true){
                            if (line.startsWith("  something less"))
                                break;
                            list.add(line);
                            if (line.contains(customer)){
                                test = true;
                            }
                            temp = line;
                            line = in.readLine();
                        }
                        if (test){
                            for (final String l : list){
                                myWriter.write(l + "\n");
                            }
                        }
                        line = temp;
                        
                    }
                    */
                }
            } while (!done);
            myWriter.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred while writing to file");
        }
        
        final File newFile = new File(customerFile);
        try {
            java.awt.Desktop.getDesktop().edit(newFile);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error Opening New file");
        }
    }//GEN-LAST:event_getTextActionPerformed

    private void editCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCSVActionPerformed
         // Open switch config file
        if (Objects.isNull(switchFile)){
            JOptionPane.showMessageDialog(this, "No Switch File Selected");
            return;
        }
        final File temp = new File(switchFile);
	// A BufferedReader is an object that lets you read a stream of Text Data
	BufferedReader in = null;
	// Try to open the file
	// Handle exceptions if they happen
	try {
            in = new BufferedReader(new FileReader(temp));
	}
	catch (final FileNotFoundException e){
            JOptionPane.showMessageDialog(this, "Switch File could not be opened");
            return;
	}
        
        final String customer = customerList.getSelectedValue();
        if (Objects.isNull(customer)){
            JOptionPane.showMessageDialog(this, "Please select a customer");
            return;
        }
        
        
        
        final ArrayList<String> ips = getMcastIps(this.customerList.getSelectedValue());
        //select csv file
        final JFileChooser chooser = new JFileChooser();
        if (!Objects.isNull(switchFilePath)){
            chooser.setCurrentDirectory(new File(switchFilePath));
        }
        chooser.setFileFilter(new FileNameExtensionFilter(".xlsx", "xlsx"));
        chooser.setDialogTitle("Select Default Lookup File");
        //Update UI
        UIManager.put("FileChooser.lookInLabelText", "Look In");
        SwingUtilities.updateComponentTreeUI(chooser);
        String excelFile = "";
        int result = chooser.showOpenDialog(this);
        final File f;
        if (result == JFileChooser.APPROVE_OPTION) {
            f = chooser.getSelectedFile();
            excelFile = f.getAbsolutePath();
            if(!excelFile.endsWith(".xlsx")) {
                JOptionPane.showMessageDialog(this, "Please select an Excel file");
                return;
            }
            excelFilePath = chooser.getCurrentDirectory().getAbsolutePath();
        } else if (result == JFileChooser.CANCEL_OPTION) {
            //System.out.println("Cancel was selected");
            return;
        }
        
        //creat new look up file
        final JFileChooser chooser2 = new JFileChooser();
        if (!Objects.isNull(switchFilePath)){
            chooser2.setCurrentDirectory(new File(switchFilePath));
        }
        chooser2.setFileFilter(new FileNameExtensionFilter(".xlsx", "xlsx"));
        chooser2.setDialogTitle("Save Customer Look Up As");
        //Update UI
        UIManager.put("FileChooser.lookInLabelText", "Save In");
        SwingUtilities.updateComponentTreeUI(chooser2);
        chooser2.setSelectedFile(new File(customer.equals("TEST") ? (customer + "1 Look Up") : customer + " Look Up"));
        chooser2.setAcceptAllFileFilterUsed(false);
        chooser2.setApproveButtonText("Open");
        String newExcelFile = "";
        int result2 = chooser2.showSaveDialog(this);
        final File f2;
        if (result2 == JFileChooser.APPROVE_OPTION) {
            f2 = chooser2.getSelectedFile();
            newExcelFile = f2.getAbsolutePath();
            if(!newExcelFile.endsWith(".xlsx")) {
                newExcelFile += ".xlsx";
            }
        } else if (result2 == JFileChooser.CANCEL_OPTION) {
            //System.out.println("Cancel was selected");
            return;
        }
        final File myObj = new File(newExcelFile);
        if (myObj.exists()){
            int answer = JOptionPane.showConfirmDialog(this, "The file exists, overwrite?",
                "Existing file", JOptionPane.YES_NO_CANCEL_OPTION);
            if (answer != JOptionPane.YES_OPTION) {
                return;
            }
        } else {
            try {
                myObj.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error Creating New File");
            }
        }
            
            
        //System.out.println(newExcelFile);
        //edit csv     
        //clearLookUpTable(excelFile);
        try {
            final FileInputStream inputStream = new FileInputStream(new File(excelFile));
            final Workbook workbook = WorkbookFactory.create(inputStream);
 
            final Sheet sheet = workbook.getSheetAt(0);
            final FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
            //clearLookUpTable(sheet, evaluator);
            int i = 1;
            for (final String s : ips){
                if (Objects.isNull(sheet.getRow(i)))
                    sheet.createRow(i);
                if (Objects.isNull(sheet.getRow(i).getCell(0)))
                    sheet.getRow(i).createCell(0);
                Cell cell2Update = sheet.getRow(i).getCell(0);
                cell2Update.setCellValue(s);
                for (int j = 1; j <= 10; j++){
                    Cell cell = sheet.getRow(i).getCell(j);
                    //System.out.println("Cell " + Objects.isNull(cell));
                    evaluator.evaluateFormulaCell(cell);
                }
                i++;
            } 
            inputStream.close();
            FileOutputStream outputStream = new FileOutputStream(newExcelFile);
            workbook.write(outputStream);
            workbook.close();
            outputStream.close();
             
        } catch (IOException | EncryptedDocumentException ex) {
            JOptionPane.showMessageDialog(this, "Error Writing to Excel file");
        }
        
        try {
            java.awt.Desktop.getDesktop().edit(new File(newExcelFile));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error Opening Excel file");
        }
        
    }//GEN-LAST:event_editCSVActionPerformed

    private void getCustomers() {
        if (switchFile.isEmpty()){
            return;
        }
        final File f = new File(switchFile);
	customers.clear();
	// A BufferedReader is an object that lets you read a stream of Text Data
	BufferedReader in = null;
		
	// Try to open the file
	// Handle exceptions if they happen
	try {
            in = new BufferedReader(new FileReader(f));
	}
	catch (final FileNotFoundException e){
            JOptionPane.showMessageDialog(this, "File could not be opened");
            return;
	}
		
	String line = null;
        boolean done = false;
        final Pattern custPattern = Pattern.compile("regex pattern");
        
	do {
            try
            { // Try to Read the next line from the file
                line = in.readLine();
            }
            catch (IOException e) 
            { //Handle any errors
		//System.out.println("There is a problem at one of the lines. Error Number - " +e);
                JOptionPane.showMessageDialog(this, "There is a problem at one of the lines. " + e.getMessage());
	    }
            
            // End of File
            if (line == null || line.length() == 0)
            {
		done = true;  // No more data in the file - Your're done!  
            }
			  
            else 
            {
                final Matcher m = custPattern.matcher(line);
                if (m.matches()){
                    customers.add(m.group(2));
                }
            }
	} while (!done);
        
        final DefaultListModel model = new DefaultListModel();
        customers.forEach(c -> {
            model.addElement(c);
        });
        customerList.setModel(model);
        
        try {
            in.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error Closing Switch File");
        }
    }
    
    private ArrayList<String> getMcastIps(final String customer){
        final ArrayList<String> ips = new ArrayList<>();
        final File f = new File(switchFile);
	// A BufferedReader is an object that lets you read a stream of Text Data
	BufferedReader in = null;
	// Try to open the file
	// Handle exceptions if they happen
	try {
            in = new BufferedReader(new FileReader(f));
	}
	catch (final FileNotFoundException e){
            JOptionPane.showMessageDialog(this, "Customer File could not be opened");
            return ips;
	}
        String line = null;
        boolean done = false;
        final Pattern pattern = Pattern.compile("regex pattern");
	do {
            try
            { // Try to Read the next line from the file
                line = in.readLine();
            }
            catch (IOException e) 
            { //Handle any errors
		//System.out.println("There is a problem at one of the lines. Error Number - " +e);
                JOptionPane.showMessageDialog(this, "There is a problem at one of the lines in the switch file. ");
	    }            
            // End of File
            if (line == null || line.length() == 0)
            {
		done = true;  // No more data in the file - Your're done!  
            }
            
            else 
            {
                try{
                    if (line.startsWith("route-map") && line.contains(customer)){
                        String temp = line + in.readLine();
                        temp = temp.replaceAll("section to eliminate", "");
                        temp = temp.replaceAll("regex", "");
                        final Matcher m = pattern.matcher(temp);
                        if (m.matches()){
                            ips.add(m.group(4));
                        }
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "An error occurred while writing to file");
                }
            }
	} while (!done);
        
        try {
            in.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error Closing Switch File");
        }
        return ips;
    }
    
    private void clearLookUpTable(final String file){            
        try {
            final FileInputStream inputStream = new FileInputStream(new File(file));
            final Workbook workbook = WorkbookFactory.create(inputStream);
 
            final Sheet sheet = workbook.getSheetAt(0);
            final FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
            int i = 1;
            Cell cell2Update = sheet.getRow(i).getCell(0);
            while(!Objects.isNull(cell2Update)){
                cell2Update.setBlank();
                for (int j = 1; j <= 10; j++){
                    Cell cell = sheet.getRow(i).getCell(j);
                    //System.out.println("Cell " + Objects.isNull(cell));
                    evaluator.evaluateFormulaCell(cell);
                }
                i++;
                cell2Update = sheet.getRow(i).getCell(0);
            } 
            inputStream.close();
            FileOutputStream outputStream = new FileOutputStream(file);
            workbook.write(outputStream);
            workbook.close();
            outputStream.close();
             
        } catch (IOException | EncryptedDocumentException ex) {
            JOptionPane.showMessageDialog(this, "Error While Clearing Lookup Table");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerDetailsApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerDetailsApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerDetailsApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerDetailsApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                final CustomerDetailsApplication frame = new CustomerDetailsApplication();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> customerList;
    private javax.swing.JButton editCSV;
    private javax.swing.JTextField filePath;
    private javax.swing.JButton getText;
    private javax.swing.JLabel jCurrentSwitchLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logo;
    private javax.swing.JButton selectFile;
    // End of variables declaration//GEN-END:variables

}
